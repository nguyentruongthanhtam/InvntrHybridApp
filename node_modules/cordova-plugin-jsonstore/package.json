{
  "_args": [
    [
      {
        "raw": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova",
        "spec": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ibm-bluemix-mobile-services/jsonstore-cordova.git",
          "sshUrl": "git+ssh://git@github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
          "httpsUrl": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
          "gitUrl": "git://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
          "shortcut": "github:ibm-bluemix-mobile-services/jsonstore-cordova",
          "directUrl": "https://raw.githubusercontent.com/ibm-bluemix-mobile-services/jsonstore-cordova/master/package.json"
        }
      },
      "/Users/tamnguyen/HybridApps/inventory-v/node_modules"
    ]
  ],
  "_from": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
  "_id": "cordova-plugin-jsonstore@1.0.2",
  "_inCache": true,
  "_location": "/cordova-plugin-jsonstore",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova",
    "spec": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ibm-bluemix-mobile-services/jsonstore-cordova.git",
      "sshUrl": "git+ssh://git@github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
      "httpsUrl": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
      "gitUrl": "git://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git",
      "shortcut": "github:ibm-bluemix-mobile-services/jsonstore-cordova",
      "directUrl": "https://raw.githubusercontent.com/ibm-bluemix-mobile-services/jsonstore-cordova/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git#09aaf940859665b158abeb6be9f2fb1d94d30a62",
  "_shasum": "1cb9cfa3a13c6fe6b03d59ebcc1fad682a86ef71",
  "_shrinkwrap": null,
  "_spec": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova",
  "_where": "/Users/tamnguyen/HybridApps/inventory-v/node_modules",
  "author": {
    "name": "IBM Bluemix Mobile Services"
  },
  "bugs": {
    "url": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova/issues"
  },
  "contributors": [
    {
      "name": "Nana Amfo",
      "email": "noamfo@us.ibm.com"
    },
    {
      "name": "Anton Aleksandrov",
      "email": "antona@us.ibm.com"
    }
  ],
  "cordova": {
    "id": "cordova-plugin-jsonstore",
    "platforms": [
      "android",
      "ios",
      "windows"
    ]
  },
  "dependencies": {},
  "description": "Cordova Plugin for JSONStore",
  "devDependencies": {},
  "gitHead": "09aaf940859665b158abeb6be9f2fb1d94d30a62",
  "homepage": "https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova#readme",
  "keywords": [
    "ecosystem:cordova",
    "cordova-android",
    "cordova-ios",
    "jsonstore"
  ],
  "license": "Apache version 2.0",
  "name": "cordova-plugin-jsonstore",
  "optionalDependencies": {},
  "readme": "# Cordova Plugin for JSONStore SDK\n\n\n## Before you begin\n\nMake sure you install the following tools and libraries.\n\n* You should already have Node.js/npm and the Cordova package installed. If you don't, you can download and install Node from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).\n\n* The Cordova CLI tool is also required to use this plugin. You can find instructions to install Cordova and set up your Cordova app at [https://cordova.apache.org/#getstarted](https://cordova.apache.org/#getstarted).\n\nTo create a Cordova application, use the Cordova Plugin for JSONStore SDK:\n\n1. Create a Cordova application\n1. Add Cordova platforms\n1. Add Cordova plugin\n1. Configure your platform \n\n\n## Installing the Cordova Plugin for JSONStore SDK\n\n### 1. Creating a Cordova application\n\n1. Run the following commands to create a new Cordova application. Alternatively you can use an existing application as well. \n\n\t```\n\t$ cordova create {appName}\n\t$ cd {appName}\n\t```\n\t\n1. Edit `config.xml` file and set the desired application name in the `<name>` element instead of a default HelloCordova.\n\n1. Continue editing `config.xml`. \n##### iOS\n  For iOS, update the `<platform name=\"ios\">` element with a deployment target declaration as shown in the code snippet below.\n\n\t```XML\n\t<platform name=\"ios\">\n\t\t<preference name=\"deployment-target\" value=\"8.0\" />\n\t\t<!-- add deployment target declaration -->\n\t</platform>\n\t```\n##### Android\n  For Android, update the `<platform name=\"android\">` element with a minimum and target SDK versions as shown in the code snippet below.\n\n\t```XML\n\t<platform name=\"android\">\n\t\t<preference name=\"android-minSdkVersion\" value=\"15\" />\n\t\t<preference name=\"android-targetSdkVersion\" value=\"23\" />\n\t\t<!-- add minimum and target Android API level declaration -->\n\t</platform>\n\t```\n\n\t> The minSdkVersion should be above 14.\n\t\n\t> The targetSdkVersion should always reflect the latest Android SDK available from Google.\n\n### 2. Adding Cordova platforms\n\nRun the following commands for the platforms that you want to add to your Cordova application\n\n```Bash\ncordova platform add ios\n\ncordova platform add android\n\ncordova platform add windows\n```\n\n### 3. Adding Cordova plugin\n\nRun the following command from your Cordova application's root directory to add the ibm-mfp-core plugin:\n\n```Bash\ncordova plugin add https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova\n```\n\nYou can check if the plugin installed successfully by running the following command, which lists your installed Cordova plugins:\n\n```Bash\ncordova plugin list\n```\n\n\n\n### 4. Configuring your platform\n#### Configuring Your iOS Environment \n\n1. Build your iOS project by running the following command:\n\n```Bash\ncordova build ios\n```\n\n#### Configuring your Android Environment\n\n1. Build your Android project by running the following command:\n\n```Bash\ncordova build android\n```\n\n\n#### Configuring your Windows Phone Enviroment\n1. Build your Windows project by running the following command:\n```Bash\n\tcordova build windows\n```\n\n\n### 5. Security\n\n**Note on Security**: By default security is disabled and if you wish to use it please follow the instructions below. You can retrieve the files needed by extacting them from **jsonstore_encryption.zip**.\n\n#### Configuring your iOS environment\n\n\n\n1. Add the following files to your `Link Binary with Libraries` in `Build Phases`:\n\n```Bash\n\tSQLCipher.framework\n\tlibSQLCipherDatabase.a\n```\n#### Configuring your Android enviroment\n\n1. Add the following files to your `libs` \n\n```Bash\n\tjsonstore_encrypt.jar\t\n\tsqlcipher.jar\n```\n\n2. Add the following files to your `jniLibs`\n```Bash\n\t |-armeabi\n\t \t-libdatabase_sqlcipher.so\n\t \t-libsqlcipher_android.so\n\t \t-libstlport_shared.so\n\t \t- libuvpn.so\n \t |-x86\n \t \t-libdatabase_sqlcipher.so\n\t \t-libsqlcipher_android.so\n\t \t-libstlport_shared.so\n\t \t- libuvpn.so\n```\n\n3. Add the following to your `build.gradle` within the `dependencies` block.\n\n```Bash\n\t compile fileTree(dir: 'libs', include: ['*.jar'])\n```\n\n4. Add the following to your `assets` directory.\n\n```Bash\n\ticudt46l.zip\t\n\t |-armeabi\n\t \t-libcrypto.so.1.0.0.zip\n\t \t-libssl.so.1.0.0.zip\n \t |-x86\n \t\t-libcrypto.so.1.0.0.zip\n\t \t-libssl.so.1.0.0.zip\n```\n\n\n#### API References\n\n\n*Initialize and open connections, get an Accessor, and add data*\n\n```Javascript\n\n\t\tvar collectionName = 'people';\n        \n        // Object that defines all the collections.\n        var collections = {\n            // Object that defines the 'people' collection.\n            people : {\n                // Object that defines the Search Fields for the 'people' collection.\n                searchFields : {name: 'string', age: 'integer'}\n            }\n        };\n        // Optional options object.\n        var options = {\n            // Optional username, default 'jsonstore'.\n            username : 'saito',\n            // Optional password, default no password.\n            password : '123',\n        };\n\n        JSONStore.init(collections, options)\n            .then(function () {\n                // Data to add, you probably want to get\n                // this data from a network call\n                var data = [{name: 'saito', age: 10}];\n\n                // Optional options for add.\n                var addOptions = {\n                    // Mark data as dirty (true = yes, false = no), default true.\n                    markDirty: true\n                };\n                // Get an accessor to the people collection and add data.\n                return JSONStore.get(collectionName).add(data, addOptions);\n        })\n        .then(function (numberOfDocumentsAdded) {\n            // Add was successful.\n        })\n        .fail(function (errorObject) {\n            // Handle failure for any of the previous JSONStore operations (init, add).\n        });\n```\n        \n*Find - locate documents inside the Store*\n    \n```Javascript\n        var collectionName = 'people';\n\n        // Find all documents that match the queries.\n        var queryPart1 = JSONStore.QueryPart()\n                   .equal('name', 'ayumu')\n                   .lessOrEqualThan('age', 10)\n\n        var options = {\n            // Returns a maximum of 10 documents, default no limit.\n            limit: 10,\n            // Skip 0 documents, default no offset.\n            offset: 0,\n            // Search fields to return, default: ['_id', 'json'].\n            filter: ['_id', 'json'],\n            // How to sort the returned values, default no sort.\n            sort: [{name: constant.ASCENDING}, {age: constant.DESCENDING}]\n        };\n        \n        JSONStore.get(collectionName)\n        // Alternatives:\n        // - findById(1, options) which locates documents by their _id field\n        // - findAll(options) which returns all documents\n        // - find({'name': 'ayumu', age: 10}, options) which finds all documents\n        // that match the query.\n            .advancedFind([queryPart1], options)\n                .then(function (arrayResults) {\n                    // arrayResults = [{_id: 1, json: {name: 'ayumu', age: 10}}]\n            })\n            .fail(function (errorObject) {\n                // Handle failure.\n            });\n```\n            \n*Replace - change the documents that are already stored inside a Collection*\n```Javascript\n        var collectionName = 'people';\n        \n        // Documents will be located with their '_id' field \n        // and replaced with the data in the 'json' field.\n        var docs = [{_id: 1, json: {name: 'hayatashin', age: 99}}];\n\n        var options = {\n            // Mark data as dirty (true = yes, false = no), default true.\n            markDirty: true\n        };\n\n        JSONStore.get(collectionName)\n            .replace(docs, options)\n                .then(function (numberOfDocumentsReplaced) {\n                    // Handle success.\n            })\n            .fail(function (errorObject) {\n                // Handle failure.\n            }); \n            \n```\n\n*Remove - delete all documents that match the query*\n\n```Javascript\n        var collectionName = 'people';\n        // Remove all documents that match the queries.\n        var queries = [{_id: 1}];\n\n        var options = {\n            // Exact match (true) or fuzzy search (false), default fuzzy search.\n            exact: true,\n            // Mark data as dirty (true = yes, false = no), default true.\n            markDirty: true\n        };\n\n        JSONStore.get(collectionName)\n            .remove(queries, options)\n                .then(function (numberOfDocumentsRemoved) {\n                    // Handle success.\n                })\n                .fail(function (errorObject) {\n                    // Handle failure.\n                });\n ```            \n                \n*Count - gets the total number of documents that match a query*\n    \n```Javascript\n        var collectionName = 'people';\n        // Count all documents that match the query.\n        // The default query is '{}' which will \n        // count every document in the collection.\n        var query = {name: 'shin'}; \n        var options = {\n            // Exact match (true) or fuzzy search (false), default fuzzy search.\n            exact: true\n        };\n\n        JSONStore.get(collectionName)\n            .count(query, options)\n                .then(function (numberOfDocumentsThatMatchedTheQuery) {\n                    // Handle success.\n                })\n                .fail(function (errorObject) {\n                    // Handle failure.\n                });\n```\n                \n*Destroy - wipes data for all users, destroys the internal storage, and clears security artifacts*\n\n\n```Javascript\n\n        JSONStore.destroy()\n            .then(function () {\n                // Handle success.\n            })\n            .fail(function (errorObject) {\n                // Handle failure.\n            });\n```\n\n*Security - enable encryption*\n\n```Javascript\n\t\tJSONStore.setEncryption(true);\n```\n \n           \n*Security - close access to all opened Collections for the current user*\n\n```Javascript\n        JSONStore.closeAll()\n            .then(function () {\n                // Handle success.\n            })\n            .fail(function (errorObject) {\n                // Handle failure.\n            }); \n ```\n\n*Security - change the password that is used to access a Store*\n   \n ```Javascript \n        // The password should be user input. \n        // It is hard-coded in the example for brevity.\n        var oldPassword = '123';\n        var newPassword = '456';\n\n        var clearPasswords = function () {\n            oldPassword = null;\n            newPassword = null;\n        };\n\n        // Default username if none is passed is: 'jsonstore'.\n        var username = 'kenshin';\n\n        JSONStore.changePassword(oldPassword, newPassword, username)\n            .then(function () {\n                // Make sure you do not leave the password(s) in memory.\n                clearPasswords();\n                // Handle success.\n            })\n            .fail(function (errorObject) {\n                // Make sure you do not leave the password(s) in memory.\n                clearPasswords();\n                // Handle failure.\n            }); \n            \n ```\n \n*Check whether a document is dirty*\n```Javascript\n        var collectionName = 'people';\n        var doc = {_id: 1, json: {name: 'hoshikata', age: 99}};\n\n        JSONStore.get(collectionName)  \n            .isDirty(doc)\n                .then(function (isDocumentDirty) {\n                    // Handle success.\n                    // isDocumentDirty - true if dirty, false otherwise.\n                })\n                .fail(function (errorObject) {\n                    // Handle failure.\n                });\n ```\n                \n*Check the number of dirty documents*\n```Javascript\n        var collectionName = 'people';\n        JSONStore.get(collectionName)  \n            .countAllDirty()\n                .then(function (numberOfDirtyDocuments) {\n                    // Handle success.\n                })\n                .fail(function (errorObject) {\n                    // Handle failure.\n                });   \n```             \n                \n*Remove a collection.* \n```Javascript\n        var collectionName = 'people';\n\n        JSONStore.get(collectionName)\n            .removeCollection()\n                .then(function () {\n                    // Handle success.\n                    // Note: You must call the 'init' API to re-use the empty collection.\n                    // See the 'clear' API if you just want to remove all data that is inside.\n                })  \n                .fail(function (errorObject) {\n                    // Handle failure.\n                });\n ```\n                \n*Clear all data that is in a collection*\n\n```Javascript\n\n       var collectionName = 'people';\n        JSONStore.get(collectionName)\n            .clear()\n                .then(function () {\n                    // Handle success.\n                    // Note: You might want to use the 'removeCollection' API\n                    // instead if you want to change the search fields.\n                })\n                .fail(function (errorObject) {\n                    // Handle failure.\n                }); \n```\n                \n*Start a transaction, add some data, remove a document, commit the transaction and roll back the transaction if there is a failure*\n\n```Javascript\n        JSONStore.startTransaction()\n            .then(function () {\n                // Handle startTransaction success.\n                // You can call every JSONStore API method except:\n                // init, destroy, removeCollection, and closeAll.\n\n                var data = [{name: 'junko'}];\n                return JSONStore.get(collectionName).add(data);\n            })\n            .then(function () {\n                    var docs = [{_id: 1, json: {name: 'junko'}}];\n                    return JSONStore.get(collectionName).remove(docs);\n            })\n            .then(function () {\n                return JSONStore.commitTransaction();\n            })\n            .fail(function (errorObject) {\n                // Handle failure for any of the previous JSONStore operation.\n                //(startTransaction, add, remove).\n                JSONStore.rollbackTransaction()\n                    .then(function () {\n                        // Handle rollback success.\n                    })\n                    .fail(function () {\n                        // Handle rollback failure.\n                    })\n            });\n```\n            \n*Get file information*\n```Javascript\n        JSONStore.fileInfo()\n            .then(function (res) {\n                //res => [{isEncrypted : true, name : kyo, size : 3072}]\n            })\n            .fail(function () {\n                // Handle failure.\n            }); \n ```\n            \n*Search with like, rightLike, and leftLike*\n ```Javascript   \n        // Match all records that contain the search string on both sides.\n        // %searchString%\n        var arr1 = JSONStore.QueryPart().like('name', 'ca');  // returns {name: 'carlos', age: 10}\n        var arr2 = JSONStore.QueryPart().like('name', 'los');  // returns {name: 'carlos', age: 10}\n\n        // Match all records that contain the search string on the left side and anything on the right side.\n        // searchString%\n        var arr1 = JSONStore.QueryPart().rightLike('name', 'ca');  // returns {name: 'carlos', age: 10}\n        var arr2 = JSONStore.QueryPart().rightLike('name', 'los');  // returns nothing\n\n        // Match all records that contain the search string on the right side and anything on the left side.\n        // %searchString\n        var arr = JSONStore.QueryPart().leftLike('name', 'ca');  // returns nothing\n        var arr2 = JSONStore.QueryPart().leftLike('name', 'los');  // returns {name: 'carlos', age: 10}\n```\n# License\n\nThis project is licensed under the terms of the Apache 2 license.\n> You can find the license [here](https://github.com/ibm-bluemix-mobile-services/jsonstore-android/blob/development/LICENSE).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ibm-bluemix-mobile-services/jsonstore-cordova.git"
  },
  "version": "1.0.2"
}
